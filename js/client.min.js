const fs = require('fs');
const { spawn } = require('child_process');
const unzipper = require('unzipper');

var db = {}, platform = '', tab = '', _emu = '';

$(document).ready(async() => {
  db = await $.getJSON(`${server}/db.json`);

  $('.collapsible').collapsible({ onOpenStart: onOpen });
  $('.brand-logo').first().html(`<img src="${server}/img/thegamecollection.png"/>`);

  M.updateTextFields();
  
  Object.keys(db.plat_list).forEach(plat => {
    $('#'+plat).html(`<p class="center"><img class="responsive-img" src="${server}/img/${plat}.png"><br>${db.plat_list[plat].name}</p>`);
    $('#'+plat).click(() => { if(plat != platform) load(plat) });
    $('#'+plat).hover(() => { if(plat != platform) $('#'+plat).addClass('purple lighten-3') });
	  $('#'+plat).mouseleave(() => { if(plat != platform) $('#'+plat).removeClass('purple lighten-3') });
  });

  $('.worker').hover(() => _user.worker.stop());
  $('.worker').mouseleave(() => _user.worker.start());

  $('a').click(async(e) => {
    if($(e.target).attr('href') == '#!') load(0,$(e.target).html());
    if(e.target.id == 'emu') _emu.load();

    if($(e.target).html() == 'person') {
      if($('#user').is(':visible')) { $('#user').hide();  }
      else { $('#user').show();  }
    }
  });

  _user = new user(server);

  load('nes','A');
});

function game(id) {
  if(id == 'emu') return _emu.check()

  var plat = id.split('_')[0], index = id.split('_')[1];
  var g = db.list[index];
  
  var fn = g.dir+'\\'+decodeURIComponent(g.url).split('/').reverse()[0].slice(0,-4);
  db.plat_list[plat].ext.some(ext => {
    if(fs.existsSync(fn+ext)) {
      if(g.file != fn+ext || (g.file == fn+ext && fs.statSync(fn+ext).size >= g.filesize)) {
        g.iso = fn+ext; return true
      }
    }
  })
	
  g.btn = g.iso ? 'play' : 'download';
	
  if(g.btn == 'play') {
	  $("div[id='"+id+"']").parent().hide();
	  $("i[id='"+id+"']").html('check_box');
	  $("i[id='"+id+"_b']").html('play_circle_filled');
  }
  else {
	  $("div[id='"+id+"']").parent().show();
	  $("i[id='"+id+"']").html('check_box_outline_blank');
	  $("i[id='"+id+"_b']").html('cloud_download');
  }
  
  $("span[id='"+id+"']").html(g.btn);
}

function myclick(id) {
  var b = id.split('_'), plat = b[0], g = db.list[b[1]];
  
  if(g.btn == 'download') {
	  if(g.dm) g.dm.start()
	  else g.dm = new dmaster(id,g)
  }
  
  if(g.btn == 'play') {
    _emu.start(plat == 'xbox' ? ['-snapshot','-config_path',__dirname+'\\xemu\\xemu.toml','-dvd_path',g.iso] : [g.iso])
  }
}

function myname(name) {
  var res = '';
  name.toString().split('').forEach(s => {
	if("1234567890abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ -+(),.!_&'%".split('').indexOf(s) > -1) res += s;
  });
  return res
}

async function load(P,T) {
  if(P) platform = P; if(T) tab = T;

  var list = await $.getJSON(`${server}/${platform}/${tab == '#' ? '%5F' : tab}.json`);
  
  db.list = []
  var i = 0; $('#list').html('');
  list.forEach(g => {
    if(g.url) {
	    var id = platform+'_'+i;
	    var str = `<li><div class='collapsible-header' style='user-select: none;'><i id="${id}" class='material-icons'></i>${g.name}<span class="badge">${g.score}</span></div><div class="collapsible-body"></div></li>`
	    $('#list').append(str);
      g.url = myurl(g.url);
	    g.dir = __dirname+'\\downloads\\'+platform + (platform == 'saturn' ? '\\'+myname(g.name) : '');
      g.file = g.dir+'\\'+decodeURIComponent(g.url).split('/').reverse()[0]
	    db.list.push(g);
	    game(platform+'_'+i);
	    i++
	  }
  });
  if($('body').css('opacity') == 0) $('body').css({ opacity: 1, transition: 'all 2s ease' });
  
  _emu = new emu(); _emu.check();

  Object.keys(db.plat_list).forEach(x => {
    if(platform == x) {
      $('#'+x).addClass('purple');
      $('#'+x).removeClass('lighten-3');
      $('#'+x).children('p').eq(0).css('color','white');
    }
    else {
      $('#'+x).removeClass('purple');
      $('#'+x).children('p').eq(0).css('color','black')
    }
  });

  $('a').each(function() {
	if($(this).attr('href') == '#!') {
	  if($(this).html() == tab) $(this).parent().addClass('active').removeClass('waves-effect')
	  else $(this).parent().removeClass('active').addClass('waves-effect')
	}
  });
}

function onOpen(e) {
  var id = $(e).find('i').attr('id'), x = id.split('_');
  var g = db.list[x[1]], card = $(e).find('.collapsible-body');
  
  if(card.html() != '') return

  var name = myname(g.name), gname = name;
  if(name.slice(-9).startsWith(' (Disc ')) gname = gname.slice(0,-9);

  card.html(`
  <table style="table-layout: fixed;">
    <tr class="emu_missing" style="display: none">
      <td colspan=2>
        <div class="alert card red lighten-4 red-text text-darken-4">
          <div class="card-content">
            <i class="material-icons" style="vertical-align: -6px;">report</i><span> File "${_emu.exe}" not found.<br>Please download "${_emu.name}" first</span>
          </div>
        </div>
      </td>
    </tr>
    <tr>
      <td style="vertical-align: top;"><img src="${server}/${x[0]}/${gname}.gif" width="95%"></td>
      <td style="vertical-align: top;">
        <a id="${id}" onclick="myclick('${id}')" class="waves-effect waves-light btn">
          <i id="${id}_b"class="material-icons left"></i><span id="${id}"></span>
        </a>
        <div class="progress"><div id="${id}" class="determinate" style="width: 0%"></div></div>
        <p id="${id}"></p>
        ${g.filesize > 1 ? '<p><strong>File size:</strong> '+g.filesize+'</p>': ''}
        <p><strong>Developer:</strong> ${g.developer}</p>
        <p><strong>Year:</strong> ${g.year}</p>
        <p><strong>Genres:</strong> ${g.genres}</p>
      </td>
    </tr>
    <tr><td colspan="2">${g.desc}</td></tr>
  </table>`);
  game(id)
}

class user {
  constructor (server) {
    this.server = server;

    this.worker = new worker()
    this.worker.connect(db.server[Number(server.startsWith('https:'))], data => {
      console.log(data)
    })
  }
}


function myurl(x) {
  for (const [key, value] of Object.entries(db.prefixes)) {
    if(x.startsWith(key+'#')) { x = value+x.slice(key.length+1); break }
  }

  if(x.startsWith('http')) return x
  return 'https://archive.org/download/'+x
}

class emu {
  constructor() {}
  check() {
    this.name = db.plat_list[platform].emu;
    this.exe = db.emu[this.name].exe;
    $('#emu').html(this.name);
    $('#exe').html(this.exe);
  
    if(fs.existsSync((this.exe).replace('.\\resources\\app',__dirname))) {
      $(".td_emu").hide(); $('.emu_missing').hide();
      return true
    }
    else {
      $("p[id='emu']").html('');
      $("div[id='emu']").css('width','0%');
      $(".td_emu").show(); return false
    }
  }
  filesize(url,cb) {
    var xhr = new XMLHttpRequest();
    xhr.open('GET', url, true);
    xhr.setRequestHeader('Range', 'bytes=0-0');
    xhr.onload = () => {
      if(xhr.status == 200 || xhr.status == 206) cb(1*xhr.getResponseHeader('Content-Range').split('/')[1])
      else cb(0)
    };
    xhr.send(null);
  }
  load() {
    if(this.check()) return
    if(this.dm) return this.dm.start()
    
    var file = this.name+'.zip', url = myurl('4#emu/'+file);
    this.filesize(url,(size => {
      if(size == 0) $("p[id='emu']").html('<span style="color:red">Download error, Please try again later.</span>')
      else this.dm = new dmaster('emu', { url: url, filesize: size, file: file, dir: __dirname })
    }))
  }
  start(params) {
    if(!this.check()) return $('.emu_missing').show();
    spawn(this.exe.split('\\').pop(),params,{ cwd: __dirname+'\\'+this.name }).on('exit', code => {
      console.log('child exit code (spawn)', code);
    });;
  }
}

class demon {
  data = false
  constructor(id,dm,open,close) {
    this.id = id;
    this.dm = dm;
    this.open = open;
    this.close = close;
    this.part = dm.part(id);
        
    var xhr = new XMLHttpRequest();
    xhr.responseType = 'arraybuffer';
    xhr.open('GET', dm.url, true);
    xhr.setRequestHeader('Cache-Control', 'no-cache');
    if(this.id*1 || this.part.range == 'bytes=0-'+(this.dm.slot - 1)) {
      xhr.setRequestHeader("Range", this.part.range );
    };

    xhr.onload = () => {
      if(xhr.status == 200 || xhr.status == 206) {
        this.data = Buffer.from(xhr.response);
        this.trigger();
        this.open();
      }
      else {
        $("p[id='"+this.id+"']").html('<span style="color:red">Download error, Please try again later.</span>');
      }
    };
    
    xhr.send(null);
    
  }
  trigger() {
    var fsize = fs.existsSync(this.dm.file) ? 1*fs.statSync(this.dm.file).size : 0;
    if(fsize == this.part.length && this.data) {
      if(this.id*1) fs.appendFileSync(this.dm.file,this.data,'binary');
      else fs.writeFileSync(this.dm.file,this.data,'binary')
      this.data = false
      var next = this.dm.childs[1*this.id+1];
      if(next && typeof next != 'string') next.trigger()
      this.close();
    }
    else if(this.data) {
      var prev = this.dm.childs[this.id-1];
      if(prev && typeof prev != 'string') prev.trigger()
    }
  }
}

class dmaster {
  proc = 0
  stop = true
  slot = 100000
  proc = [0,0]
  childs = {}
  constructor(id,g) {
    this.id = id;
    this.url = g.url; this.file = g.file; this.dir = g.dir; this.emu = g.emu;
    if(fs.existsSync(this.file) && fs.statSync(this.file).size == g.filesize) {
      this.proc = [1,1]; this.show();
    }
    else {
      this.size = g.filesize;
      if(!fs.existsSync(this.dir)) fs.mkdirSync(this.dir);
      var fsize = fs.existsSync(this.file) ? fs.statSync(this.file).size : 0;
      var i = 0; while(true) {
        var p = this.part(i);
        if(p.size == 0) break
        if(fsize > p.length) this.proc[0] += 1
        else this.childs[i] = p.range;
        this.proc[1] += 1;
        i++
      }
      if(this.show() < 100) this.start()
    }
  }
  part(i) {
    if(i < 0) return { length: 0 }
    var p1 = i*this.slot, p2 = p1 + this.slot - 1; if(p2 > this.size - 1) p2 = this.size - 1;
    if(p2 < p1) return { size: 0 }
    return {
      range: 'bytes='+p1+'-'+p2,
      size: p2 - p1 + 1,
      length: p1
    }
  }
  show() {
    var proc = 1*(this.proc[0]*100/this.proc[1]).toFixed();
    $("p[id='"+this.id+"']").html(proc+'%');
	  $("div[id='"+this.id+"']").css('width',proc+'%');
    if(this.proc[0] == this.proc[1]) {
      if((this.file.slice(this.file.length - 4)).toLowerCase() == '.zip') this.unzip(res => {
        if(!this.stop) this.start()
      })
      else if(!this.stop) this.start();
    }
    return proc
  }
  async start() {
    this.stop = !this.stop;
    if(!this.stop) {
      $("a[id='"+this.id+"']").addClass('red');
      for(var i = 0; i < 5; i++) this.child()
    }
    else {
      $("a[id='"+this.id+"']").removeClass('red');
      game(this.id);
    }
  }
  async child() {
	  if(this.stop) return
    var keys = Object.keys(this.childs);
    for(var i = 0; i < keys.length; i++) {
      var range = this.childs[keys[i]];
      if(typeof range == 'string') {
        this.childs[keys[i]] = new demon(keys[i],this,() => { this.child() },
        () => {
          delete this.childs[keys[i]];
          this.proc[0] += 1; this.show();
        });
        break
      }
    }
  }
  async unzip(cb) {
    if(!fs.existsSync(this.file)) return cb(false);

    if(!fs.existsSync(this.dir)) fs.mkdirSync(this.dir);
    $("span[id='"+this.id+"']").html('unzip');
    
    var zip = fs.createReadStream(this.file).pipe(unzipper.Parse({ forceStream: true }));
    for await (const e of zip) {
      var name = this.dir+'\\'+e.path.replace('/','\\');
      
      var written = 0, { uncompressedSize } = e.vars;
      $("p[id='"+this.id+"']").html(name);
      $("div[id='"+this.id+"']").css('width','0%');
      if(e.type == 'Directory') fs.mkdirSync(name);
      else {
        e.on('data', data => {
          written += data.length;
          $("div[id='"+this.id+"']").css('width',(written/uncompressedSize*100).toFixed()+'%')
        });
        e.pipe(fs.createWriteStream(name));
      }
    }
    $("p[id='"+this.id+"']").html('');
    $("div[id='"+this.id+"']").css('width','0%');
    fs.unlinkSync(this.file);
    
    cb(true)
  }
}

