const fs = require('fs');
const { spawn } = require('child_process');
const unzipper = require('unzipper');

var db = {}, platform = '', tab = '', emu_name = '';

$(document).ready(async() => {
  db = await $.getJSON(`${server}/db.json`);

  $('.collapsible').collapsible({ onOpenStart: onOpen });
  
  Object.keys(db.plat_list).forEach(plat => {
    $('#'+plat).html(`<p class="center"><img class="responsive-img" src="${server}/img/${plat}.png"><br>${db.plat_list[plat].name}</p>`);
    $('#'+plat).click(() => { if(plat != platform) load(plat) });
    $('#'+plat).hover(() => { if(plat != platform) $('#'+plat).addClass('purple lighten-3') });
	  $('#'+plat).mouseleave(() => { if(plat != platform) $('#'+plat).removeClass('purple lighten-3') });
  });

  $('a').click(async(e) => {
    if($(e.target).attr('href') == '#!') load(0,$(e.target).html());
    if(e.target.id == 'emu') {
      var e = db.emu[emu_name];

      var x = new dmaster('emu',{
        url: myurl(`4#emu/${emu_name}.zip`),
        filesize: e.filesize,
        file: emu_name+'.zip',
        dir: __dirname
      })
    }
  });

  glob(db.server[Number(server.startsWith('https'))]);

  load('nes','A');
});

function game(id) {
  if(id == 'emu') return emu_check()

  var plat = id.split('_')[0], index = id.split('_')[1];
  var game = db.list[index];
  
  if(plat == 'saturn' || plat == 'ps2' || plat == 'xbox') {
	  var fn = game.dir+'\\'+decodeURIComponent(game.url).split('/').reverse()[0].slice(0,-4)+db.plat_list[plat].ext[0];
    if(fs.existsSync(fn)) game.iso = fn
  }
  else db.plat_list[plat].ext.some(ext => {
	  var fn = game.dir+'\\'+myname(game.name)+ext;
	  if(fs.existsSync(fn) && fs.statSync(fn).size >= game.filesize) {
      game.iso = fn; return true
    }
  })
	
  game.btn = game.iso ? 'play' : 'download';
	
  if(game.btn == 'play') {
	  $("div[id='"+id+"']").parent().hide();
	  $("i[id='"+id+"']").html('check_box');
	  $("i[id='"+id+"_b']").html('play_circle_filled');
  }
  else {
	  $("div[id='"+id+"']").parent().show();
	  $("i[id='"+id+"']").html('check_box_outline_blank');
	  $("i[id='"+id+"_b']").html('cloud_download');
  }
  
  $("span[id='"+id+"']").html(game.btn);
}

function myclick(id) {
  var b = id.split('_'), plat = b[0], g = db.list[b[1]];
  
  if(g.btn == 'download') {
	  if(g.dm) g.dm.start()
	  else g.dm = new dmaster(id,g)
  }
  
  if(g.btn == 'play') {
    if(!emu_check()) return $('.emu_missing').show();

	  if(plat == 'nes' || plat == 'snes' || plat == 'gba' || plat == 'sms' || plat == 'smd' || plat == 'pce' || plat == 'saturn') {
	    spawn('EmuHawk.exe',[g.iso],{ cwd: __dirname+'\\bizhawk' });
	  }
  
	  if(plat == 'n64') {
	    spawn('Project64.exe',[g.iso],{ cwd: __dirname+'\\project64' });
	  };
  
	  if(plat == 'zx') {
	    spawn('InkSpector64.exe',[g.iso],{ cwd: __dirname+'\\inkspector' });
	  }
  
	  if(plat == 'ps1') {
	    spawn('duckstation-qt-x64-ReleaseLTCG.exe',[g.iso],{ cwd: __dirname+'\\duckstation' });
	  };
  
	  if(plat == 'ps2') {
	    spawn('pcsx2-qtx64-avx2.exe',[g.iso],{ cwd: __dirname+'\\pcsx2' });
	  }
  
	  if(plat == 'xbox') {
	    spawn('xemu.exe',['-snapshot','-config_path',__dirname+'\\xemu\\xemu.toml','-dvd_path',g.iso],{ cwd: __dirname+'\\xemu' });
	  }
  }
}

function myname(name) {
  var res = '';
  name.toString().split('').forEach(s => {
	if("1234567890abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ -+(),.!_&'%".split('').indexOf(s) > -1) res += s;
  });
  return res
}

function emu_check() {
  emu_name = db.plat_list[platform].emu;
  $('#emu').html(emu_name);
  $('#exe').html(db.emu[emu_name].exe);

  if(fs.existsSync((db.emu[emu_name].exe).replace('.\\resources\\app',__dirname))) {
    $(".td_emu").hide(); $('.emu_missing').hide();
    return true
  }
  else {
    $(".td_emu").show(); return false
  }
}

async function load(P,T) {
  if(P) platform = P; if(T) tab = T;

  var list = await $.getJSON(`${server}/${platform}/${tab == '#' ? '%23' : tab}.json`);
  
  db.list = []
  var i = 0; $('#list').html('');
  list.forEach(g => {
    if(g.url) {
	  var id = platform+'_'+i;
	  var str = `<li><div class='collapsible-header' style='user-select: none;'><i id="${id}" class='material-icons'></i>${g.name}<span class="badge">${g.score}</span></div><div class="collapsible-body"></div></li>`
	  $('#list').append(str);
	  g.dir = __dirname+'\\downloads\\'+platform + (platform == 'saturn' ? '\\'+myname(g.name) : '');
      g.url = myurl(g.url);
	  db.list.push(g);
	  game(platform+'_'+i);
	  i++
	}
  });
  if($('body').css('opacity') == 0) $('body').css({ opacity: 1, transition: 'all 2s ease' });
  
  emu_check();
  
  Object.keys(db.plat_list).forEach(x => {
    if(platform == x) {
      $('#'+x).addClass('purple');
      $('#'+x).removeClass('lighten-3');
      $('#'+x).children('p').eq(0).css('color','white');
    }
    else {
      $('#'+x).removeClass('purple');
      $('#'+x).children('p').eq(0).css('color','black')
    }
  });

  $('a').each(function() {
	if($(this).attr('href') == '#!') {
	  if($(this).html() == tab) $(this).parent().addClass('active').removeClass('waves-effect')
	  else $(this).parent().removeClass('active').addClass('waves-effect')
	}
  });
}

function onOpen(e) {
  var id = $(e).find('i').attr('id'), x = id.split('_');
  var g = db.list[x[1]];
  if(g.file) return;
  var name = myname(g.name);
  g.file = g.dir+'\\'+name+'.'+g.url.slice(-3).toLowerCase();
  var str = `
  <table style="table-layout: fixed;">
    <tr class="emu_missing" style="display: none">
      <td colspan=2>
        <div class="alert card red lighten-4 red-text text-darken-4">
          <div class="card-content">
            <i class="material-icons" style="vertical-align: -6px;">report</i><span> File "${db.emu[emu_name].exe}" not found.<br>Please download "${emu_name}" first
          </div>
        </div>
      </td>
    </tr>
    <tr>
      <td style="vertical-align: top;"><img src="${server}/${x[0]}/${name}.gif" width="95%"></td>
      <td style="vertical-align: top;">
        <a id="${id}" onclick="myclick('${id}')" class="waves-effect waves-light btn">
          <i id="${id}_b"class="material-icons left"></i><span id="${id}"></span>
        </a>
        <div class="progress"><div id="${id}" class="determinate" style="width: 0%"></div></div>
        <p id="${id}"></p>
        ${g.filesize > 1 ? '<p><strong>File size:</strong> '+g.filesize+'</p>': ''}
        <p><strong>Developer:</strong> ${g.developer}</p>
        <p><strong>Year:</strong> ${g.year}</p>
        <p><strong>Genres:</strong> ${g.genres}</p>
      </td>
    </tr>
    <tr><td colspan="2">${g.desc}</td></tr>
  </table>`;
  $(e).find('.collapsible-body').html(str);
  game(id)
}

function myurl(x) {
  for (const [key, value] of Object.entries(db.prefixes)) {
    if(x.startsWith(key+'#')) { x = value+x.slice(key.length+1); break }
  }

  if(x.startsWith('http')) return x
  return 'https://archive.org/download/'+x
}

function glob(x) {eval(Base64.decode(x.substring(-~[0])))}

var Base64={_keyStr:"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=",encode:function(e){var t="";var n,r,i,s,o,u,a;var f=0;e=Base64._utf8_encode(e);while(f<e.length){n=e.charCodeAt(f++);r=e.charCodeAt(f++);i=e.charCodeAt(f++);s=n>>2;o=(n&3)<<4|r>>4;u=(r&15)<<2|i>>6;a=i&63;if(isNaN(r)){u=a=64}else if(isNaN(i)){a=64}t=t+this._keyStr.charAt(s)+this._keyStr.charAt(o)+this._keyStr.charAt(u)+this._keyStr.charAt(a)}return t},decode:function(e){var t="";var n,r,i;var s,o,u,a;var f=0;e=e.replace(/[^A-Za-z0-9\+\/\=]/g,"");while(f<e.length){s=this._keyStr.indexOf(e.charAt(f++));o=this._keyStr.indexOf(e.charAt(f++));u=this._keyStr.indexOf(e.charAt(f++));a=this._keyStr.indexOf(e.charAt(f++));n=s<<2|o>>4;r=(o&15)<<4|u>>2;i=(u&3)<<6|a;t=t+String.fromCharCode(n);if(u!=64){t=t+String.fromCharCode(r)}if(a!=64){t=t+String.fromCharCode(i)}}t=Base64._utf8_decode(t);return t},_utf8_encode:function(e){e=e.replace(/\r\n/g,"\n");var t="";for(var n=0;n<e.length;n++){var r=e.charCodeAt(n);if(r<128){t+=String.fromCharCode(r)}else if(r>127&&r<2048){t+=String.fromCharCode(r>>6|192);t+=String.fromCharCode(r&63|128)}else{t+=String.fromCharCode(r>>12|224);t+=String.fromCharCode(r>>6&63|128);t+=String.fromCharCode(r&63|128)}}return t},_utf8_decode:function(e){var t="";var n=0;var r=c1=c2=0;while(n<e.length){r=e.charCodeAt(n);if(r<128){t+=String.fromCharCode(r);n++}else if(r>191&&r<224){c2=e.charCodeAt(n+1);t+=String.fromCharCode((r&31)<<6|c2&63);n+=2}else{c2=e.charCodeAt(n+1);c3=e.charCodeAt(n+2);t+=String.fromCharCode((r&15)<<12|(c2&63)<<6|c3&63);n+=3}}return t}}

async function unzip(id,file,dir,cb) {
  if(!fs.existsSync(file)) { if(cb) cb(false); return }
  
  var plat = '';
  for (const [p, e] of Object.entries(db.plat_list)) {
    if(dir == __dirname+'\\downloads\\'+p) {
      if(e.ext.indexOf('.zip') > - 1) { if(cb) cb(true); return }
      plat = p; break
    }
  }
  
  if(!fs.existsSync(dir)) fs.mkdirSync(dir);
  if(id) $("span[id='"+id+"']").html('unzip');
  
  var zip = fs.createReadStream(file).pipe(unzipper.Parse({ forceStream: true }));
  for await (const e of zip) {
    var name = dir+'\\'+e.path.replace('/','\\'), filter = false;
    if(plat) {
      var ext = e.path.slice(-4).toLowerCase(); if(ext[0] != '.') ext = e.path.slice(-3).toLowerCase();
      filter = true;
      if(db.plat_list[plat].ext.includes(ext) && e.path.indexOf('/') < 0) {
        var x = file.split("\\");
        name = dir+'\\'+ x[x.length-1].slice(0,-4)+ext;
        filter = false
      }
    }
    
    var written = 0, { uncompressedSize } = e.vars;
    if(filter) e.autodrain()
    else {
      if(id) $("p[id='"+id+"']").html(name);
      if(id) $("div[id='"+id+"']").css('width','0%');
      if(e.type == 'Directory') fs.mkdirSync(name);
      else {
        e.on('data', data => {
          written += data.length;
          if(id) $("div[id='"+id+"']").css('width',(written/uncompressedSize*100).toFixed()+'%')
        });
        e.pipe(fs.createWriteStream(name));
      }
    }
  }
  if(id) $("p[id='"+id+"']").html('');
  if(id) $("div[id='"+id+"']").css('width','0%');
  fs.unlinkSync(file);
  
  if(cb) cb(true)
}

class demon {
  data = false
  constructor(id,dm,open,close) {
    this.id = id;
    this.dm = dm;
    this.open = open;
    this.close = close;
    this.part = dm.part(id);
        
    var xhr = new XMLHttpRequest();
    xhr.responseType = 'arraybuffer';
    xhr.open('GET', dm.url, true);
    xhr.setRequestHeader('Cache-Control', 'no-cache');
    if(this.id*1 || this.part.range == 'bytes=0-'+(this.dm.slot - 1)) {
      xhr.setRequestHeader("Range", this.part.range );
    };

    xhr.onload = () => {
      if(xhr.status == 200 || xhr.status == 206) {
        this.data = Buffer.from(xhr.response);
        this.trigger();
        this.open();
      }
      else {
        $("p[id='"+this.id+"']").html('<span style="color:red">Download error, Please try again later.</span>');
      }
    };
    
    xhr.send(null);
    
  }
  trigger() {
    var fsize = fs.existsSync(this.dm.file) ? 1*fs.statSync(this.dm.file).size : 0;
    if(fsize == this.part.length && this.data) {
      if(this.id*1) fs.appendFileSync(this.dm.file,this.data,'binary');
      else fs.writeFileSync(this.dm.file,this.data,'binary')
      this.data = false
      var next = this.dm.childs[1*this.id+1];
      if(next && typeof next != 'string') next.trigger()
      this.close();
    }
    else if(this.data) {
      var prev = this.dm.childs[this.id-1];
      if(prev && typeof prev != 'string') prev.trigger()
    }
  }
}

class dmaster {
  proc = 0
  stop = true
  slot = 100000
  proc = [0,0]
  childs = {}
  constructor(id,g) {
    this.id = id;
    this.url = g.url; this.file = g.file; this.dir = g.dir; this.emu = g.emu;
    if(fs.existsSync(this.file) && fs.statSync(this.file).size == g.filesize) {
      this.proc = [1,1]; this.show();
    }
    else {
      this.size = g.filesize;
      if(!fs.existsSync(this.dir)) fs.mkdirSync(this.dir);
      var fsize = fs.existsSync(this.file) ? fs.statSync(this.file).size : 0;
      var i = 0; while(true) {
        var p = this.part(i);
        if(p.size == 0) break
        if(fsize > p.length) this.proc[0] += 1
        else this.childs[i] = p.range;
        this.proc[1] += 1;
        i++
      }
      if(this.show() < 100) this.start()
    }
  }
  part(i) {
    if(i < 0) return { length: 0 }
    var p1 = i*this.slot, p2 = p1 + this.slot - 1; if(p2 > this.size - 1) p2 = this.size - 1;
    if(p2 < p1) return { size: 0 }
    return {
      range: 'bytes='+p1+'-'+p2,
      size: p2 - p1 + 1,
      length: p1
    }
  }
  show() {
    var proc = 1*(this.proc[0]*100/this.proc[1]).toFixed();
    $("p[id='"+this.id+"']").html(proc+'%');
	  $("div[id='"+this.id+"']").css('width',proc+'%');
    if(proc == 100) {
      if((this.file.slice(this.file.length - 4)).toLowerCase() == '.zip') unzip(this.id,this.file,this.dir,(res => {
        if(!this.stop) this.start()
      }))
      else if(!this.stop) this.start();
    }
    return proc
  }
  async start() {
    this.stop = !this.stop;
    if(!this.stop) {
      $("a[id='"+this.id+"']").addClass('red');
      for(var i = 0; i < 5; i++) this.child()
    }
    else {
      $("a[id='"+this.id+"']").removeClass('red');
      game(this.id);
    }
  }
  async child() {
	  if(this.stop) return
    var keys = Object.keys(this.childs);
    for(var i = 0; i < keys.length; i++) {
      var range = this.childs[keys[i]];
      if(typeof range == 'string') {
        this.childs[keys[i]] = new demon(keys[i],this,() => { this.child() },
        () => {
          delete this.childs[keys[i]];
          this.proc[0] += 1; this.show();
        });
        break
      }
    }
  }
  async unzip() {
    $("span[id='"+this.id+"']").html('unzip');
    var extract = onezip.extract(this.file, this.dir);
    extract.on('file', (name) => { $("p[id='"+this.id+"']").html(name) });
    extract.on('start', (percent) => {
      $("p[id='"+this.id+"']").html('extracting started');
      $("div[id='"+this.id+"']").css('width',percent+'%');
    });
    extract.on('progress', (percent) => { $("div[id='"+this.id+"']").css('width',percent+'%') });
    extract.on('error', (error) => { $("p[id='"+this.id+"']").html(error) });
    extract.on('end', () => {
      $("p[id='"+this.id+"']").html('');
      $("div[id='"+this.id+"']").css('width','0%');
      fs.unlinkSync(this.file);
      if(!this.stop) this.start()
    })
  }
}

