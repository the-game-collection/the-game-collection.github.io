var db = {}, platform = '', tab = '', _user, _metamask, server = window.location.href

$(document).ready(async() => {
  db = await $.getJSON('db.json');
  
  $('.parallax').parallax();
  $('.collapsible').collapsible();
  
  Object.keys(db.plat_list).forEach(plat => {
    $('#'+plat).html(`<p class="center"><img class="responsive-img" src="img/${plat}.png"><br>${db.plat_list[plat].name}</p>`);
    $('#'+plat).click(() => { if(plat != platform) load(plat) });
    $('#'+plat).hover(() => { if(plat != platform) $('#'+plat).addClass('purple lighten-3') });
	  $('#'+plat).mouseleave(() => { if(plat != platform) $('#'+plat).removeClass('purple lighten-3') });
  });
  
  $('.worker').hover(() => _user.worker.stop());
  $('.worker').mouseleave(() => _user.worker.start());
  
  $('a').click(function(e) {
    if(e.target.id == 'person') {
      if($('#user').is(':visible')) $('#user').hide()
      else $('#user').show();
      return
    }
    
    if($(e.target).attr('href') == '#!') return load(0,$(e.target).html());
    
    if($(e.target).hasClass('head-link')) {
      e.preventDefault();
      var goto = $(this).attr('href');
      $('html, body').animate({ scrollTop: $(goto).offset().top }, 800);
      return
    }
  });
  
  _user = new user(server);
  _metamask = new metamask();
  
  load('nes','A');
})

async function load(P,T) {
  if(P) platform = P; if(T) tab = T;

  var list = await $.getJSON(`${platform}/${tab == '#' ? '0' : tab}.json`);
  $('#list').html('');
  list.forEach(g => {
    var x = !g.url ? '' : `<a class="waves-effect waves-light btn" href="${myurl(g.url)}"><i class="material-icons left">file_download</i>Download</a>`;
    var str = `<tr><td>${g.name}</td><td>${g.year}</td><td>${g.developer}<td>${x}</td></tr>`;
    $('#list').append(str)
  });
  if($('body').css('opacity') == 0) $('body').css({ opacity: 1, transition: 'all 2s ease' });

  $('#plat').html(db.plat_list[platform].name);
    
  var e = db.plat_list[platform].emu;
  $('#emu').html(`<a href="${db.emu[e].web}" target="_blank">${e}</a>`);
  $('#exe').html(db.emu[e].exe);
  
  Object.keys(db.plat_list).forEach(x => {
    if(platform == x) {
      $('#'+x).addClass('purple');
      $('#'+x).removeClass('lighten-3');
      $('#'+x).children('p').eq(0).css('color','white');
    }
    else {
      $('#'+x).removeClass('purple');
      $('#'+x).children('p').eq(0).css('color','black')
    }
  });

  $('a').each(function() {
	  if($(this).attr('href') == '#!') {
	    if($(this).html() == tab) $(this).parent().addClass('active').removeClass('waves-effect')
	    else $(this).parent().removeClass('active').addClass('waves-effect')
	  }
  });
}

function myurl(x) {
  for (const [key, value] of Object.entries(db.prefixes)) {
    if(x.startsWith(key+'#')) { x = value+x.slice(key.length+1); break }
  }

  if(x.startsWith('http')) return x
  return 'https://archive.org/download/'+x
}

class user {
  usdt = 0
  metamask = []
  market = []
  a = []
  n = [0,'looks_one','looks_two','looks_3','looks_4','looks_5','looks_6']
  constructor (server) {
    this.server = server;

    this.worker = new worker()
    this.worker.connect(db.server[Number(server.startsWith('https:'))], data => {

      if(data.login === true) {
        $('.login').hide(); $("div[id='card']").show();
        $('.c_user').html($('#username').val());
        if(data.demo) $('.c_user:first').append(' (demo)')
      }
      
      if(data.login === false) this.captcha('Password is wrong');
      
      var f = false;
      if(data.usdt != undefined) { this.usdt = data.usdt; f = true }
      if(data.metamask) {
        data.metamask.forEach(e => {
          var ff = this.metamask.some((x,i) => {
            if(e.date == x.date) { this.metamask[i] = e; return true }
          })
          if(!ff) this.metamask.push(e)
        });
        f = true
      }
      if(data.market) {
        data.market.forEach(e => {
          var ff = this.market.some((x,i) => {
            if(e.date == x.date) { this.market[i] = e; return true }
          })
          if(!ff) this.market.push(e)
        });
        f = true
      }
      
      if(f) this.card()
    });

    if(!this.getCookie('master')) {
      this.master = server.split('id=')[1];
      if(this.master) this.setCookie('master', this.master);
    }
    this.captcha('');
    $('#login').click(() => {
      if(this.a[0]*10+this.a[1]+this.a[2]*10+this.a[3] != $("#captcha").val()) return this.captcha('Captcha is wrong');
      if($('#password').val().length < 6) return this.captcha('Password length must be at least 6 characters');
      if($('#username').val() == '') return this.captcha('Username can not be empty');
      if(!$('#username').val().match("^[A-Za-z0-9]+$")) return this.captcha('Username must contain only letters or digits');
      this.captcha('');
      this.to_server({ cmd: 'login', val: this.master ? this.master : '#' })
    });
    $('.back').click(() => this.back());
  }

  card() {
    var res = { usdt: { o: 0, f: this.usdt } };
    this.market.forEach(e => {
      if(e.side == 'buy') { res.usdt.o += e.price*(e.qty - e.exec); res.usdt.f -= e.price*e.qty }
      if(e.side == 'sell') res.usdt.f += e.price*e.exec;
    });
    $('#o_usdt').html(1*res.usdt.o.toFixed(4)); $('#f_usdt').html(1*res.usdt.f.toFixed(4));

    Object.keys(_metamask.nets).forEach(id => {
      res[id] = { o: 0, f: 0 }
      this.metamask.forEach(e => { if(e.id == id) res[id].f += 1*e.qty });
      this.market.forEach(e => { if(e.id == id) {
        if(e.side == 'buy') res[id].f += 1*e.exec
        if(e.side == 'sell') { res[id].o += e.qty - e.exec; res[id].f -= e.qty }
      }});
      $('#o_'+id).html(1*res[id].o.toFixed(4)); $('#f_'+id).html(1*res[id].f.toFixed(4));
    })

    return res
  }

  captcha(msg) {
    this.a = []
    while(this.a.length < 4 ) this.a.push(this.random(1,6));
    var str = '';
    this.a.forEach((v,i) => {
      str += `<i class="material-icons small">${this.n[v]}</i>`;
      if(i == 1) str += `<i class="material-icons small">add</i>`;
    });
    $("#_captcha").html(str);
    if(msg == '') {
      $("div[id='login_error']").hide();
      return true
    }
    $("span[id='login_error']").html(msg);
    $("div[id='login_error']").show();
    return false
  }
  back() {
    $('#deposit').hide(); $('#deposit_hist').hide(); $('#withdraw').hide();$('#withdraw_hist').hide(); $('#card').show()
  }
  to_server(obj) {
    obj.user = $('#username').val();
    obj.md5 = MD5($('#password').val());
    this.worker.ws_send(obj);
    if(obj.cmd == 'deposit' || obj.cmd == 'withdraw') this.back()
  }
  random(min, max) { 
    return Math.floor(Math.random() * (max - min + 1) + min)
  }
  setCookie(cname, cvalue) {
    const d = new Date();
    d.setTime(d.getTime() + (365 * 24 * 60 * 60 * 1000));
    let expires = "expires="+d.toUTCString();
    document.cookie = cname + "=" + cvalue + ";" + expires + ";path=/";
  }
  getCookie(cname) {
    let name = cname + "=";
    let ca = document.cookie.split(';');
    for(let i = 0; i < ca.length; i++) {
      let c = ca[i];
      while (c.charAt(0) == ' ') c = c.substring(1);
      if (c.indexOf(name) == 0) return c.substring(name.length, c.length);
    }
    return "";
  }
}

class metamask {
  metamask = false
  nets = {
    1: {
      name: 'Ethereum Mainnet',
      url:  'https://mainnet.infura.io/v3/',
      coin: 'ETH',
      explorer: 'https://etherscan.io'
    },
    56: {
      name: 'BNB Smart Chain',
      url:  'https://bsc-dataseed.binance.org',
      coin: 'BNB',
      explorer: 'https://bscscan.com'
    },
    43114: {
      name: 'Avalanche Network C-Chain',
      url:   'https://avalanche-mainnet.infura.io',
      coin: 'AVAX',
      explorer: 'https://snowtrace.io'
    },
    250: {
      name: 'Fantom Opera',
      url:  'https://rpc.ftm.tools/',
      coin: 'FTM',
      explorer: 'https://ftmscan.com'
    },
    137: {
      name: 'Polygon Mainnet',
      url:  'https://polygon-mainnet.infura.io',
      coin: 'MATIC',
      explorer: 'https://polygonscan.com'
    },
    5: {
      name: 'Ethereum Goerli Testnet',
      url:   'https://goerli.infura.io/v3/9aa3d95b3bc440fa88ea12eaa4456161',
      coin: 'ETH',
      explorer: 'https://goerli.etherscan.io',
      faucet: 'https://goerlifaucet.com'
    },
    97: {
      name: 'Binance Smart Chain Testnet',
      url:   'https://data-seed-prebsc-1-s1.binance.org:8545',
      coin: 'BNB',
      explorer: 'https://testnet.bscscan.com',
      faucet: 'https://testnet.bnbchain.org/faucet-smart'
    }
  }

  constructor() {
    this.metamask = typeof window.ethereum !== 'undefined' && ethereum.isMetaMask;

    for (const [id, n] of Object.entries(this.nets)) {
      $('#metamask').append(`
      <tr>
      <td><img src="img/${n.coin.toLowerCase()}.png" width="32" height="32"></td>
      <td>${n.name} (${n.coin}) ${n.name.indexOf('Goerli Testnet') > -1 ? '[1]' : n.name.indexOf('Chain ') > -1 ? '[2]': ''}</td><td id="o_${id}">0</td><td id="f_${id}">0</td>
      <td><a id="d_${id}" class="disabled btn" onclick="_metamask.deposit(${id})"><i class="material-icons left">file_download</i>Deposit</a></td>
      <td><a id="w_${id}" class="disabled btn" onclick="_metamask.withdraw(${id})"><i class="material-icons left">file_upload</i>Withdraw</a></td>
      </tr>
      `)
    }
    
    this.chainId();
    ethereum.on('chainChanged', async Id => this.chainId(parseInt(Id,16)));

    $('#deposit_v').change(e => this.deposit(e)); $('#deposit_s').click(() => this.deposit());
    $('#withdraw_v').change(e => this.withdraw(e)); $('#withdraw_s').click(() => this.withdraw());
  }
  async address () {
    if(!this.metamask) return 0;
    var accounts = await ethereum.request({method: 'eth_requestAccounts'});
    return accounts[0];
  }
  async chainId(Id){
    if(!this.metamask) return 0;
    if(!Id) Id = parseInt(await ethereum.request({ method: 'eth_chainId' }),16);
    else if($("#deposit").is(":visible") || $("#withdraw").is(":visible")) _user.back();

    Object.keys(this.nets).forEach(key => {
      if(key == Id) {
        $(`#d_${key}`).removeClass("disabled").addClass('waves-effect waves-light');
        $(`#w_${key}`).removeClass("disabled").addClass('waves-effect waves-light');
      }
      else {
        $(`#d_${key}`).removeClass("waves-effect waves-light").addClass('disabled');
        $(`#w_${key}`).removeClass("waves-effect waves-light").addClass('disabled');
      }
    });

    this.id = Id;
    return Id
  }
  async balance() {
    if(!this.metamask) return 0;
    var address = await this.address();
    var x = await ethereum.request({method: 'eth_getBalance', params: [address,'latest']});
    return parseInt(x,16)/(10**18);
  }
  async deposit(e) {
    if(typeof e == 'object') {
      var x = $(e.target).val();
      if(isNaN(x) || x == 0) {
        $(`#deposit_s`).removeClass("waves-effect waves-light submit").addClass('disabled');
        $(`#deposit_f`).html('0.0001');
      }
      else {
        $(`#deposit_s`).removeClass("disabled").addClass('waves-effect waves-light submit');
        var fee = 1*(x/100).toFixed(4); if(fee == 0) fee = 0.0001;
        $(`#deposit_f`).html(fee)
      }
      return
    }

    if(typeof e == 'number') {
      var n = this.nets[e];
      $('#deposit_h').html(`Deposit ${n.coin} from ${n.name}`);
      $('#deposit_c').html(n.coin);
      $('#deposit_v').val(0); $(`#deposit_s`).removeClass("waves-effect waves-light submit").addClass('disabled');
      $('#card').hide(); $('#deposit').show(); $('#deposit_hist').show();

      $('#deposit_tdody').html(''); $('#deposit_coin').html(this.nets[this.id].coin);
      _user.metamask.forEach(e => {
        if(e.id == this.id) {
          if(e.qty > 0) {
            $('#deposit_tdody').append(`<tr>
              <td>${new Date(e.date).toLocaleString()}</td>
              <td><a href="${this.nets[this.id].explorer+'/tx/'+e.tx}" target="_blank">${e.tx}</a></td>
              <td>${1*e.qty}</td>
              <td>${e.status}</td>
            </tr>`)
          }
        }
      })

      return
    }

    if(!this.metamask) return alert('Error: Metamask not found');

    try {
      var x = 1*$('#deposit_v').val()+1*$(`#deposit_f`).html();
      var txhash = await ethereum.request({
        method: 'eth_sendTransaction',
        params: [{
          from: await this.address(),
          to: '0x75576e2510B45dd99117446d297Cee580Ba83092',
          value: '0x'+Math.trunc(x*(10**18)).toString(16)
        }]
      });
      _user.to_server({ cmd: 'deposit', val: { tx: txhash, id: this.id } });
    } catch (e) {
      alert(e.message)
    }
  }
  async withdraw(e) {
    if(typeof e == 'object') {
      var x = $(e.target).val();
      if(isNaN(x) || x == 0) {
        $(`#withdraw_s`).removeClass("waves-effect waves-light submit").addClass('disabled');
        $(`withdraw_f`).html('0.0001');
      }
      else {
        var fee = 1*(x/100).toFixed(4); if(fee == 0) fee = 0.0001;
        $(`#withdraw_f`).html(fee);

        var c = _user.card();
        var t1 = c.usdt.o + c.usdt.f >= 30 || this.nets[this.id].name.indexOf('Testnet') > 0;
        var t2 = 1*c[this.id].f > 1*x+fee;

        if(t1 && t2) $(`#withdraw_s`).removeClass("disabled").addClass('waves-effect waves-light submit');
        else $(`#withdraw_s`).removeClass("waves-effect waves-light submit").addClass('disabled');
      }
      return
    }
    if(typeof e == 'number') {
      var n = this.nets[e];
      $('#withdraw_h').html(`Withdrawal ${n.coin} to ${n.name}`);
      $('#withdraw_c').html(n.coin);
      $('#withdraw_v').val(0); $(`#withdraw_s`).removeClass("waves-effect waves-light submit").addClass('disabled');
      $('#card').hide(); $('#withdraw').show(); $('#withdraw_hist').show();

      $('#withdraw_tdody').html(''); $('#withdraw_coin').html(this.nets[this.id].coin);
      _user.metamask.forEach(e => {
        if(e.id == this.id) {
          if(e.qty < 0) {
            $('#withdraw_tdody').append(`<tr>
              <td>${new Date(e.date).toLocaleString()}</td>
              <td>${e.tx.indexOf('_') > -1 ? 'pending' : '<a href="'+this.nets[this.id].explorer+'/tx/'+e.tx+'" target="_blank">'+e.tx+'</a>'}</td>
              <td>${-1*e.qty}</td>
              <td>${e.status}</td>
            </tr>`)
          }
        }
      })

      if(n.name.indexOf('Testnet') > 0) $('#vip30').hide()
      else $('#vip30').show()
      $('#withdraw_a').html((1*_user.card()[e].f).toFixed(4));
      return
    }

    _user.to_server({ cmd: 'withdraw', val: { to: await this.address(), qty: (1*$('#withdraw_v').val()).toFixed(4), id: this.id } })
  }
}

function MD5(d){function M(d){for(var _,m="0123456789ABCDEF",f="",r=0;r<d.length;r++)_=d.charCodeAt(r),f+=m.charAt(_>>>4&15)+m.charAt(15&_);return f}function X(d){for(var _=Array(d.length>>2),m=0;m<_.length;m++)_[m]=0;for(m=0;m<8*d.length;m+=8)_[m>>5]|=(255&d.charCodeAt(m/8))<<m%32;return _}function V(d){for(var _="",m=0;m<32*d.length;m+=8)_+=String.fromCharCode(d[m>>5]>>>m%32&255);return _}function Y(d,_){d[_>>5]|=128<<_%32,d[14+(_+64>>>9<<4)]=_;for(var m=1732584193,f=-271733879,r=-1732584194,i=271733878,n=0;n<d.length;n+=16){var h=m,t=f,g=r,e=i;f=md5_ii(f=md5_ii(f=md5_ii(f=md5_ii(f=md5_hh(f=md5_hh(f=md5_hh(f=md5_hh(f=md5_gg(f=md5_gg(f=md5_gg(f=md5_gg(f=md5_ff(f=md5_ff(f=md5_ff(f=md5_ff(f,r=md5_ff(r,i=md5_ff(i,m=md5_ff(m,f,r,i,d[n+0],7,-680876936),f,r,d[n+1],12,-389564586),m,f,d[n+2],17,606105819),i,m,d[n+3],22,-1044525330),r=md5_ff(r,i=md5_ff(i,m=md5_ff(m,f,r,i,d[n+4],7,-176418897),f,r,d[n+5],12,1200080426),m,f,d[n+6],17,-1473231341),i,m,d[n+7],22,-45705983),r=md5_ff(r,i=md5_ff(i,m=md5_ff(m,f,r,i,d[n+8],7,1770035416),f,r,d[n+9],12,-1958414417),m,f,d[n+10],17,-42063),i,m,d[n+11],22,-1990404162),r=md5_ff(r,i=md5_ff(i,m=md5_ff(m,f,r,i,d[n+12],7,1804603682),f,r,d[n+13],12,-40341101),m,f,d[n+14],17,-1502002290),i,m,d[n+15],22,1236535329),r=md5_gg(r,i=md5_gg(i,m=md5_gg(m,f,r,i,d[n+1],5,-165796510),f,r,d[n+6],9,-1069501632),m,f,d[n+11],14,643717713),i,m,d[n+0],20,-373897302),r=md5_gg(r,i=md5_gg(i,m=md5_gg(m,f,r,i,d[n+5],5,-701558691),f,r,d[n+10],9,38016083),m,f,d[n+15],14,-660478335),i,m,d[n+4],20,-405537848),r=md5_gg(r,i=md5_gg(i,m=md5_gg(m,f,r,i,d[n+9],5,568446438),f,r,d[n+14],9,-1019803690),m,f,d[n+3],14,-187363961),i,m,d[n+8],20,1163531501),r=md5_gg(r,i=md5_gg(i,m=md5_gg(m,f,r,i,d[n+13],5,-1444681467),f,r,d[n+2],9,-51403784),m,f,d[n+7],14,1735328473),i,m,d[n+12],20,-1926607734),r=md5_hh(r,i=md5_hh(i,m=md5_hh(m,f,r,i,d[n+5],4,-378558),f,r,d[n+8],11,-2022574463),m,f,d[n+11],16,1839030562),i,m,d[n+14],23,-35309556),r=md5_hh(r,i=md5_hh(i,m=md5_hh(m,f,r,i,d[n+1],4,-1530992060),f,r,d[n+4],11,1272893353),m,f,d[n+7],16,-155497632),i,m,d[n+10],23,-1094730640),r=md5_hh(r,i=md5_hh(i,m=md5_hh(m,f,r,i,d[n+13],4,681279174),f,r,d[n+0],11,-358537222),m,f,d[n+3],16,-722521979),i,m,d[n+6],23,76029189),r=md5_hh(r,i=md5_hh(i,m=md5_hh(m,f,r,i,d[n+9],4,-640364487),f,r,d[n+12],11,-421815835),m,f,d[n+15],16,530742520),i,m,d[n+2],23,-995338651),r=md5_ii(r,i=md5_ii(i,m=md5_ii(m,f,r,i,d[n+0],6,-198630844),f,r,d[n+7],10,1126891415),m,f,d[n+14],15,-1416354905),i,m,d[n+5],21,-57434055),r=md5_ii(r,i=md5_ii(i,m=md5_ii(m,f,r,i,d[n+12],6,1700485571),f,r,d[n+3],10,-1894986606),m,f,d[n+10],15,-1051523),i,m,d[n+1],21,-2054922799),r=md5_ii(r,i=md5_ii(i,m=md5_ii(m,f,r,i,d[n+8],6,1873313359),f,r,d[n+15],10,-30611744),m,f,d[n+6],15,-1560198380),i,m,d[n+13],21,1309151649),r=md5_ii(r,i=md5_ii(i,m=md5_ii(m,f,r,i,d[n+4],6,-145523070),f,r,d[n+11],10,-1120210379),m,f,d[n+2],15,718787259),i,m,d[n+9],21,-343485551),m=safe_add(m,h),f=safe_add(f,t),r=safe_add(r,g),i=safe_add(i,e)}return Array(m,f,r,i)}function md5_cmn(d,_,m,f,r,i){return safe_add(bit_rol(safe_add(safe_add(_,d),safe_add(f,i)),r),m)}function md5_ff(d,_,m,f,r,i,n){return md5_cmn(_&m|~_&f,d,_,r,i,n)}function md5_gg(d,_,m,f,r,i,n){return md5_cmn(_&f|m&~f,d,_,r,i,n)}function md5_hh(d,_,m,f,r,i,n){return md5_cmn(_^m^f,d,_,r,i,n)}function md5_ii(d,_,m,f,r,i,n){return md5_cmn(m^(_|~f),d,_,r,i,n)}function safe_add(d,_){var m=(65535&d)+(65535&_);return(d>>16)+(_>>16)+(m>>16)<<16|65535&m}function bit_rol(d,_){return d<<_|d>>>32-_};var r = M(V(Y(X(d),8*d.length)));return r.toLowerCase()}
